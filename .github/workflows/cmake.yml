name: CMake

on:
  release:
    type: created
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    strategy:
      matrix:
      #  fail-fast: false
        include:
        #  - { icon: '3️⃣2️⃣', sys: mingw32, env: i686 }
          - { icon: '6️⃣4️⃣', sys: mingw64, env: x86_64 }
         # - { icon: '🟨', sys: ucrt64,  env: ucrt-x86_64 }  # Experimental!
         # - { icon: '🟧', sys: clang64, env: clang-x86_64 } # Experimental!
    name: 🚧${{ matrix.icon }} ${{ matrix.sys }}

    defaults:
      run:
        shell: msys2 {0}
    steps:
  #  - uses: msys2/setup-msys2@v2
  #    with:
  #      update: true
  #      install: >-
  #        base-devel
  #        mingw-w64-cmake
    - uses: actions/checkout@v2 

    - name: '${{ matrix.icon }} Setup MSYS2'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{matrix.sys}}
        update: true
        install: >-
          git
          make
          mingw-w64-${{matrix.env}}-toolchain
          mingw-w64-${{matrix.env}}-cmake

    - name: ${{matrix.icon}} mingw-w64 jurplel/install-qt-action@v2
      uses: jurplel/install-qt-action@v2
      if: matrix.sys=='mingw64'
      with:
        arch: win64_mingw81

  #  - name: ${{matrix.icon}} mingw-w32 jurplel/install-qt-action@v2
 #     uses: jurplel/install-qt-action@v2
#      if: ${{matrix.sys}}=='mingw32'
 #     with:
  #      arch: win32_mingw53

#    - name: prepare_directory
#      run: mkdir ${{github.workspace}}\boost
      #shell: pwsh
    - name: Install_boost
      uses: MarkusJx/install-boost@v2.0.0
      with:
        boost_version: 1.71.0
        #boost_install_dir: ${{github.workspace}}\boost

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        export Boost_DIR='boost\boost'
        cmake -G "MSYS Makefiles" -B '${{github.workspace}}\build' -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX='${{github.workspace}}\install' -DLOEF_NOUPDATE="yes" 
        
    - name: Build
      # Build your program with the given configuration
      run: cmake --build '${{github.workspace}}\build' --config ${{env.BUILD_TYPE}}
      
    - name: Install
      run: |
        cmake --install '${{github.workspace}}\build'
        '$RUNNER_WORKSPACE\bin\windeployqt' '${{github.workspace}}\install\LOEF_drawer.exe'
      shell: bash

    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: installed_directory
        path: ${{github.workspace}}\install
